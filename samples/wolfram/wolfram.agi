#!/usr/bin/env perl

#
# AGI script to submit queries to WolframAlpha and set the answer as a dialplan variable.
#
# Copyright (C) 2012, Lefteris Zafiris <zaf.000@gmail.com>
#
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2. See the COPYING file
# at the top of the source tree.
#
# -----
# Usage
# -----
# agi(wolfram.agi,"text")
# Submits the text string as a query to WolframAlpha Computational Knowledge Engine.
# The retrieved answer is set as an asterisk dialplan variable named "wolfram_answer".
#

use strict;
use warnings;
use LWP::UserAgent;
use CGI::Util qw(escape);
use XML::Simple;
$| = 1;

# * To use this script you must get an app ID from http://products.wolframalpha.com/api *

# ----------------------------- #
#   User defined parameters:    #
# ----------------------------- #
# Your App ID from wolfram      #
my $app_id = "";

# Use SSL                       #
my $use_ssl = 0;

# Verbose debugging messages    #
my $debug = 0;

# ----------------------------- #

my %AGI;
my $name;
my @result;
my $ua;
my $url;
my $question;
my $w_reply;
my $answer;
my $host     = "api.wolframalpha.com/v2/query";
my $var_name = "wolfram_answer";
my $results  = 0;

# Store AGI input #
while (<STDIN>) {
	chomp;
	last if (!length);
	$AGI{$1} = $2 if (/^agi_(\w+)\:\s+(.*)$/);
}
($AGI{arg_1}) = @ARGV;

$name = " -- $AGI{request}:";

if (!$app_id) {
	return_var("You must have an Application ID from WolframAlpha to use this script.");
	die "$name You must have an Application ID from WolframAlpha to use this script.\n";
}

if (!length($AGI{arg_1})) {
	return_var("No text passed to Wolfram.");
	die "$name No text passed, Aborting.\n";
}
warn "$name Questions is: $AGI{arg_1}\n" if($debug);
$question = escape($AGI{arg_1});

if ($use_ssl) {
	$url = "https://" . $host;
	$ua = LWP::UserAgent->new(ssl_opts => {verify_hostname => 1});
} else {
	$url = "http://" . $host;
	$ua = LWP::UserAgent->new;
}

$ua->agent("Mozilla/5.0 (X11; Linux) AppleWebKit/535.2 (KHTML, like Gecko)");
$ua->env_proxy;
$ua->timeout(15);
my $ua_request = HTTP::Request->new(
	'GET' => "$url?input=$question&appid=$app_id".
		"&format=plaintext&scantimeout=8&excludepodid=Input&excludepodid=Interpretation"
);
my $ua_response = $ua->request($ua_request);
if (!$ua_response->is_success) {
	return_var("Failed to contact Wolfram server.");
	die "$name Failed to contact server.";
}

$w_reply = XMLin($ua_response->content);
if ($w_reply->{success} eq 'false') {
	warn "$name Wolfram returned no answer.\n" if ($debug);
	return_var("I don't know how to answer that.");
	exit;
}

# Trying to locate answers in predifined fields in Wolframs output. #
foreach (keys %{$w_reply->{pod}}) {
	if (/subpod/) {
		add_answer("$w_reply->{pod}{$_}{plaintext}\n");
		$results++;
		last;
	} elsif (/Result|Value/) {
		eval{ add_answer("$w_reply->{pod}{$_}{subpod}{plaintext}\n"); };
		eval{ add_answer("$w_reply->{pod}{$_}{subpod}[0]{plaintext}\n"); };
		eval{ add_answer("$w_reply->{pod}{$_}{subpod}[1]{plaintext}\n"); };
		$results++;
		last;
	} elsif (/Definition:WordData|Basic:ChemicalData|ComparisonAsLength|Comparison|
				BasicInformation|NotableFacts:PeopleData|Basic|Properties/x
			) {
		add_answer("$w_reply->{pod}{$_}{subpod}{plaintext}\n");
		$results++;
	} elsif (/WeatherForecast:WeatherData/) {
		add_answer("$w_reply->{pod}{$_}{subpod}[0]{title} ",
			"$w_reply->{pod}{$_}{subpod}[0]{plaintext}\n");
		add_answer("$w_reply->{pod}{$_}{subpod}[1]{title} ",
			"$w_reply->{pod}{$_}{subpod}[1]{plaintext}\n");
		eval{ add_answer("$w_reply->{pod}{$_}{subpod}[2]{title} ",
			"$w_reply->{pod}{$_}{subpod}[2]{plaintext}\n"); };
		$results++;
		last;
	}
}

# If the above did't work search for answers all available fields. #
if (!$results) {
	foreach (keys %{$w_reply->{pod}}) {
		eval{ add_answer("$_: $w_reply->{pod}{$_}{subpod}{plaintext}\n"); };
		eval{ add_answer("$_: $w_reply->{pod}{$_}{subpod}[0]{plaintext}\n"); };
		eval{ add_answer("$_: $w_reply->{pod}{$_}{subpod}[1]{plaintext}\n"); };
		$results++;
	}
}

# In case we were not able to locate any answers. #
if (!$results) {
	warn "$name Failed to get any answer.\n" if ($debug);
	return_var("Failed to get any answer.");
} else {
	warn "$name Answer is:$answer\n" if ($debug);
	return_var($answer);
}
exit;

# Parsing each answer line and storing it. #
sub add_answer {
	foreach (@_) {
		next if (/HASH\(/);
		s/\|/,/g;
		s/"//g;
		s/(\d+\.\d{4})\d*/$1/g;
		s/([^.,!?;:])\n+/$1\. /g;
		s/([.,!?;:])\n+/$1 /g;
		s/\s+/ /g;
		$answer .= "$_";
	}
}

# Store answers in channel variable. #
# test
sub return_var {
	my $text = shift;
	warn "$name Setting $var_name to $text\n" if ($debug);
	print "SET VARIABLE \"$var_name\" \"$text\"\n";
	checkresponse();
}

sub checkresponse {
	my $input = <STDIN>;
	my @values;

	chomp $input;
	if ($input =~ /^200/) {
		$input =~ /result=(-?\d+)\s?(.*)$/;
		if (!length($1)) {
			warn "$name Command failed: $input\n";
			@values = ("-1");
		} else {
			warn "$name Command returned: $input\n" if ($debug);
			@values = ("$1", "$2");
		}
	} else {
		warn "$name Unexpected result: $input\n";
		@values = ("-1");
	}
	return @values;
}
